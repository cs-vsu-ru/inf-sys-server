version: '3.5'

services:

  postgresql:
    image: mirror.gcr.io/postgres:16-alpine
    container_name: postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=$$POSTGRES_DB --username=$$POSTGRES_USER" ]
      interval: 5s
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    environment:
      - POSTGRES_USER=cs-pr-development
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
      - POSTGRES_DB=postgres
      - POSTGRES_SERVER_PASSWORD
      - POSTGRES_PARSER_PASSWORD
    restart: always
    networks:
      - backend-db-network

  redis:
    image: mirror.gcr.io/redis:7.0.11
    container_name: redis
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli --raw incr ping" ]
      interval: 5s
    networks:
      - backend-redis-network
    restart: unless-stopped

  inf-sys-server:
    image: ghcr.io/cs-vsu-ru/inf-sys-server:latest
    container_name: inf-sys-server
    healthcheck:
      test: curl -f http://inf-sys-server:8080/actuator/health
      interval: 15s
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - POSTGRES_PASSWORD=${POSTGRES_SERVER_PASSWORD}
      - JWT_SECRET_KEY
      - PARSER_URL
      - BASE_FILES_FOLDER=/api/files/
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - files-volume:/api/files
    networks:
      - backend-db-network
      - nginx-network

  inf-sys-parser:
    image: ghcr.io/cs-vsu-ru/inf-sys-parser:latest
    container_name: inf-sys-parser
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PARSER_PASSWORD}
      - SERVER_URL=${SERVER_INSIDE_URL}
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      inf-sys-server:
        condition: service_healthy
    networks:
      - backend-db-network
      - backend-redis-network
      - nginx-network

  nginx:
    build:
      context: ./nginx
      dockerfile: ./nginx.dockerfile
    container_name: nginx
    volumes:
      - files-volume:/etc/nginx/html/api/files
      - ./nginx/crt.pem:/etc/nginx/certs/crt.pem
      - ./nginx/key.pem:/etc/nginx/certs/key.pem
      - ./nginx/config.nginx:/etc/nginx/conf.d/default.conf
      - ./log:/var/log/nginx
    depends_on:
      inf-sys-server:
        condition: service_healthy
    ports:
      - "443:443"
    networks:
      - nginx-network

volumes:
  postgres-data:
    name: postgres-data
  files-volume:
    name: files-volume

networks:
  backend-db-network: { }
  backend-redis-network: { }
  nginx-network: { }
